@using FitnessTrackMono.Shared.Models;
@using FitnessTrackMono.Client.Services.ExerciseService;
@inject IExerciseService ExerciseService;

<EditForm Model="e" OnSubmit="HandleSubmit">
    <div>
        <label for="name"> Name </label>
        <RadzenTextBox id="name" @bind-Value="e.Name" class="form-control"></RadzenTextBox>
        <label for="target-muscle"> Target Muscle </label>
        <RadzenTextBox id="target-muscle" @bind-Value="e.TargetMuscle" Disabled class="form-control"></RadzenTextBox>
        <label for="sets-num"> Number of sets </label>
        <RadzenNumeric id="sets-num" @bind-Value="e.DefaultNumberOfSets" class="form-control"></RadzenNumeric>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int WorkoutId { get; set; }

    private string btnText = string.Empty;
    private Exercise e = new Exercise();


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Confirm";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // TODO:
            e.TargetMuscle = "Bicep";
            e.WorkoutId = WorkoutId;
        }
        else
        {
            e = await ExerciseService.GetSingleExercise((int)Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            e.ExerciseSets = new List<ExerciseSet>();
            await ExerciseService.CreateExercise(e);
        }
        else
        {
            await ExerciseService.UpdateExercise(e);
        }
    }

    async Task DeleteExercise()
    {
        await ExerciseService.DeleteExercise(e.Id);
    }
}