@using FitnessTrackMono.Shared.Models;
@inject IMeasurementsService MeasurementsService;

@if (Id == null)
{
    <PageTitle> Add Measurement</PageTitle>
    <h3> Add Measurement</h3>
}
else
{
    <PageTitle> Edit Measurement</PageTitle>
    <h3> Edit Measurement - @m.Id</h3>
}

<EditForm Model="m" OnSubmit="HandleSubmit">
    <div>
        <label for="type"> Type </label>
        <InputText id="type" @bind-Value="m.Type" class="form-control"></InputText>
        <label for="value"> Value </label>
        <InputNumber id="value" @bind-Value="m.Value" class="form-control"></InputNumber>
        <label for="unit"> Unit </label>
        <InputText id="unit" @bind-Value="m.Unit" class="form-control"></InputText>
        <label for="date"> Date </label>
        <InputDate id="date" @bind-Value="m.Date" class="form-control"></InputDate>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    private string btnText = string.Empty;
    private Measurement m = new Measurement();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Submit";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {

        }
        else
        {
            m = await MeasurementsService.GetSingleMeasurement((int)Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await MeasurementsService.CreateMeasurement(m);
        }
        else
        {
            await MeasurementsService.UpdateMeasurement(m);
        }
    }

    async Task DeleteHero()
    {
        await MeasurementsService.DeleteMeasurement(m.Id);
    }
}
