@page "/measurements"
@using FitnessTrackMono.Shared.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMono.Client.Services.MeasurementsService;
@inject HttpClient Http;
@inject IMeasurementsService MeasurementService
@inject NavigationManager NavManager
@inject Radzen.DialogService DialogService

<PageTitle> Measurements </PageTitle>
@*@if (loading)
    {
    <h3>Loading...</h3>
    }
    else
    {*@

<RadzenCard class="m-2">

    <RadzenTabs @bind-SelectedIndex=@selectedIndex>

        <Tabs>
            @foreach (var type in measurementTypes)
            {
                <RadzenTabsItem Text=@type>
                    @if (measurementsByType(type).Count() == 0)
                    {
                        <RadzenChart>
                            <div>No Entries for this type of measurement!</div>
                        </RadzenChart>
                    }
                    else
                    {
                        <RadzenChart class="mb-5">
                            <RadzenLineSeries Smooth="false" Data="measurementsByType(type)" CategoryProperty="Date" Title=@type ValueProperty="Value">
                                <ChildContent>
                                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#874EFE" StrokeWidth="1" Size="6" />
                                </ChildContent>
                            </RadzenLineSeries>
                        </RadzenChart>

                    }

                    <RadzenText TextStyle="TextStyle.H5" class="d-inline"> Entries </RadzenText>
                    <RadzenButton Click=@(args => ShowForm(null, type)) Icon="add" Size="Radzen.ButtonSize.Medium" ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />

                    <RadzenDataList WrapItems="false" AllowPaging="true" PageSize="5" Data="measurementsByType(type)" TItem="Measurement">
                        <Template Context="measurement">
                            <RadzenRow>
                                <RadzenColumn Size="4" Class="d-inline">
                                    <RadzenIcon Icon="calendar_today" Style="font-size: 16px" /><b>@measurement.Date.ToShortDateString()</b> -
                                    <span><b>@measurement.Value</b>@measurement.Unit</span>
                                </RadzenColumn>
                                <RadzenColumn Size="4" Class="d-inline">
                                    <RadzenButton Click=@(args => ShowForm(measurement.Id)) Icon="edit" Size="Radzen.ButtonSize.Small" ButtonStyle="Radzen.ButtonStyle.Secondary" Class="rz-border-radius-10 rz-shadow-6" />
                                    <RadzenButton Click=@(args => DeleteMeasurement(measurement.Id)) Icon="delete" Size="Radzen.ButtonSize.Small" ButtonStyle="Radzen.ButtonStyle.Danger" Class="rz-border-radius-10 rz-shadow-6" />

                                </RadzenColumn>
                            </RadzenRow>

                        </Template>
                    </RadzenDataList>

                </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
</RadzenCard>
@code {
    private string[] measurementTypes = { "Weight", "Waist", "Body fat" };
    int selectedIndex = 0;
    private IEnumerable<Measurement> weightMeasurements = new List<Measurement>();
    private IEnumerable<Measurement> bodyFatMeasurements = new List<Measurement>();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await MeasurementService.GetMeasurements();
            //loading = false;

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    private IEnumerable<Measurement> measurementsByType(string type)
    {
        return MeasurementService.Measurements.Where(x => x.Type == type).OrderByDescending(x => x.Date);
    }


    void OnChange(int index)
    {
        Console.WriteLine($"Tab with index {index} was selected.");
    }

    private async Task ShowForm(int? id, string? type = null)
    {
        var title = id == null ? "Add Measurement" : "Edit Measurement";
        Console.WriteLine(type);
        await DialogService.OpenAsync<MeasurementForm>(title,
        new Dictionary<string, object>() { { "Id", id }, { "DefaultType", type } },
        new Radzen.DialogOptions()
            {
                Width = "512px",
                Resizable = true,
                Draggable = true,
                CloseDialogOnOverlayClick = true
            }
        );
    }
    private async Task DeleteMeasurement(int id)
    {
        await MeasurementService.DeleteMeasurement(id);
    }
}
