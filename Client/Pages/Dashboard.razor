@page "/"
@using FitnessTrackMono.Shared.Models;
@using FitnessTrackMono.Client.Services.MeasurementsService;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inject HttpClient Http
@inject IMeasurementsService MeasurementService;

<PageTitle>Dashboard</PageTitle>
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H5" class="d-inline"> Dashboard </RadzenText>
    <div class="container-fluid mt-3">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H6" class="d-inline"> Measurements </RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="d-inline"> (7-day moving average) </RadzenText>
            @* loading indicator *@
            <RadzenRow class="mt-2">
                <RadzenColumn>
                    @if (weightAverages != null)
                    {
                        <div>
                            <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Weight </RadzenText>
                            <span class="cursor-pointer">
                                <RadzenIcon title=@($"{weightAverages.CurrentCount} entries in the past 7 days") Icon="info"
                                        IconStyle="Radzen.IconStyle.Info" style="font-size: large; vertical-align: sub;">
                                </RadzenIcon>
                            </span>
                        </div>
                        <div>

                            @if (weightAverages.CurrentAverage != null)
                            {
                                <span class="h1 mb-3 me-2 d-inline">
                                    @string.Format("{0:0.00}", weightAverages.CurrentAverage)
                                </span>
                            }
                            else
                            {
                                <span class="h1 mb-3 me-2 d-inline">
                                    N/A
                                </span>
                            }

                            <span class="cursor-pointer">
                                @if (weightAverages.ChangeDirection == "up")
                                {
                                    <RadzenIcon title="@weightIconTitle()" Icon="trending_up"></RadzenIcon>
                                }
                                else if (weightAverages.ChangeDirection == "down")
                                {
                                    <RadzenIcon title="@weightIconTitle()" Icon="trending_down"></RadzenIcon>
                                }
                                else if (weightAverages.ChangeDirection == "none")
                                {
                                    <RadzenIcon title="@bfIconTitle()" Icon="trending_flat"></RadzenIcon>
                                }
                                else
                                {
                                    <span></span>
                                }
                            </span>
                        </div>
                    }
                </RadzenColumn>
                <RadzenColumn>
                    @if (waistAverages != null)
                    {
                        <div>
                            <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Waist </RadzenText>
                            <span class="cursor-pointer">
                                <RadzenIcon title=@($"{waistAverages.CurrentCount} entries in the past 7 days") Icon="info"
                                        IconStyle="Radzen.IconStyle.Info" style="font-size: large; vertical-align: sub;">
                                </RadzenIcon>
                            </span>
                        </div>
                        <div>
                            @if (waistAverages.CurrentAverage != null)
                            {
                                <span class="h1 mb-3 me-2 d-inline">
                                    @string.Format("{0:0.00}", waistAverages.CurrentAverage)
                                </span>
                            }
                            else
                            {
                                <span class="h1 mb-3 me-2 d-inline">
                                    N/A
                                </span>
                            }

                            <span class="cursor-pointer">
                                @if (waistAverages.ChangeDirection == "up")
                                {
                                    <RadzenIcon title="@waistIconTitle()" Icon="trending_up"></RadzenIcon>
                                }
                                else if (waistAverages.ChangeDirection == "down")
                                {
                                    <RadzenIcon title="@waistIconTitle()" Icon="trending_down"></RadzenIcon>
                                }
                                else if (waistAverages.ChangeDirection == "none")
                                {
                                    <RadzenIcon title="@bfIconTitle()" Icon="trending_flat"></RadzenIcon>
                                }
                                else
                                {
                                    <span></span>
                                }
                            </span>
                        </div>
                    }
                </RadzenColumn>
                <RadzenColumn>
                    @if (bfAverages != null)
                    {
                        <div>
                            <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Body fat </RadzenText>
                            <span class="cursor-pointer">
                                <RadzenIcon title=@($"{bfAverages.CurrentCount} entries in the past 7 days") Icon="info"
                                        IconStyle="Radzen.IconStyle.Info" style="font-size: large; vertical-align: sub;">
                                </RadzenIcon>
                            </span>
                        </div>
                        <div>
                            @if (bfAverages.CurrentAverage != null)
                            {
                                <span class="h1 mb-3 me-2">
                                    @string.Format("{0:0.00}", bfAverages.CurrentAverage)
                                </span>
                            }
                            else
                            {
                                <span class="h1 mb-3 me-2">
                                    N/A
                                </span>
                            }
                            <span class="cursor-pointer">
                                @if (bfAverages.ChangeDirection == "up")
                                {
                                    <RadzenIcon title="@bfIconTitle()" Icon="trending_up"></RadzenIcon>
                                }
                                else if (bfAverages.ChangeDirection == "down")
                                {
                                    <RadzenIcon title="@bfIconTitle()" Icon="trending_down"></RadzenIcon>
                                }
                                else if (bfAverages.ChangeDirection == "none")
                                {
                                    <RadzenIcon title="@bfIconTitle()" Icon="trending_flat"></RadzenIcon>
                                }
                                else
                                {
                                    <span></span>
                                }
                            </span>
                        </div>
                    }
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </div>
    <div class="container-fluid mt-3">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H6" class="d-inline"> Meals </RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="d-inline"> (7-day moving average) </RadzenText>
            <RadzenRow class="mt-2">
                <RadzenColumn>
                    <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Calories </RadzenText>
                    <div>
                        <span class="h1 mb-3 me-2 d-inline">2,986</span>
                        <span class="cursor-pointer" >
                            <RadzenIcon title="@weightIconTitle()" Icon="trending_up"></RadzenIcon>
                        </span>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Protein </RadzenText>
                    <div>
                        <span class="h1 mb-3 me-2 d-inline">2,986</span>
                        <span class="cursor-pointer">
                            <RadzenIcon title="@waistIconTitle()" Icon="trending_up"></RadzenIcon>
                        </span>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Carbohydrates </RadzenText>
                    <div>
                        <span class="h1 mb-3 me-2">2,986</span>
                        <span class="cursor-pointer">
                            <RadzenIcon title="@bfIconTitle()" Icon="trending_up"></RadzenIcon>
                        </span>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenText class="d-inline" TextStyle="TextStyle.Subtitle1"> Fats </RadzenText>
                    <div>
                        <span class="h1 mb-3 me-2">2,986</span>
                        <span class="cursor-pointer">
                            <RadzenIcon title="@bfIconTitle()" Icon="trending_up"></RadzenIcon>
                        </span>
                    </div>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </div>

    <div class="container-fluid mt-3">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H6" class="d-inline"> Workouts </RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="d-inline"> What to do </RadzenText>
        </RadzenCard>
    </div>
</RadzenCard>
@code {
    ElementReference weightIcon;
    ElementReference waistIcon;
    ElementReference bfIcon;
    List<AverageResults>? averages = null;
    AverageResults? weightAverages = null;
    AverageResults? waistAverages = null;
    AverageResults? bfAverages = null;
    protected string weightIconTitle()
    {
        string result = string.Empty;
        if (weightAverages != null)
        {
            if (weightAverages.ChangeDirection == "up")
            {
                result = $"{weightAverages.Difference}kg up from previous average";
            }
            else if (weightAverages.ChangeDirection == "down")
            {
                result = $"{weightAverages.Difference}kg down from previous average";
            }
            else
            {
                result = "No change from previous average";
            }
        }
        return result;
    }
    protected string waistIconTitle()
    {
        string result = string.Empty;
        if (waistAverages != null)
        {
            if (waistAverages.ChangeDirection == "up")
            {
                result = $"{waistAverages.Difference}cm up from previous average";
            }
            else if (waistAverages.ChangeDirection == "down")
            {
                result = $"{waistAverages.Difference}cm down from previous average";
            }
            else
            {
                result = "No change from previous average";
            }
        }
        return result;
    }

    protected string bfIconTitle()
    {
        string result = string.Empty;
        if (bfAverages != null)
        {
            if (bfAverages.ChangeDirection == "up")
            {
                result = $"{bfAverages.Difference}% up from previous average";
            }
            else if (bfAverages.ChangeDirection == "down")
            {
                result = $"{bfAverages.Difference}% down from previous average";
            }
            else
            {
                result = "No change from previous average";
            }
        }
        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            averages = await MeasurementService.GetAverages(DateTime.Today);

            weightAverages = averages[0];
            waistAverages = averages[1];
            bfAverages = averages[2];
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}