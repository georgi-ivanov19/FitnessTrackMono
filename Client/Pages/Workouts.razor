@page "/workouts"
@using FitnessTrackMono.Shared.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMono.Client.Services.WorkoutService;
@using FitnessTrackMono.Client.Services.TrackedWorkoutService;
@inject HttpClient Http;
@inject IWorkoutService WorkoutService;
@inject ITrackedWorkoutService TrackedWorkoutService;
@inject NavigationManager NavManager;
@inject Radzen.DialogService DialogService;

<RadzenCard>
    <div class="mb-3">
        <RadzenText TextStyle="TextStyle.H5" class="d-inline"> Workouts </RadzenText>
        <RadzenButton Click=@(args => ShowForm(null)) Icon="add" Size="Radzen.ButtonSize.Medium"
                      ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />
    </div>
    <RadzenDataList WrapItems="false" AllowPaging="true" Data="WorkoutService.Workouts"
                    TItem="Workout">
        <Template Context="workout">
            <div class="d-inline workout-data-item p-2" @onclick=@(args => NavManager.NavigateTo($"workout/{workout.Id}"))>
                <RadzenText class="d-inline">@workout.Name</RadzenText>
            </div>
            <RadzenButton class="p-2" Variant="Radzen.Variant.Text" Click=@(args => StartWorkout(workout)) Icon="play_circle_filled"
                          ButtonStyle="Radzen.ButtonStyle.Success" Text="Start" Size="Radzen.ButtonSize.Small" />

            <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(workout.Id)) Icon="edit"
                          ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" />

            <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteWorkout(workout.Id)) Icon="delete"
                          ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" />

        </Template>
    </RadzenDataList>
</RadzenCard>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await WorkoutService.GetWorkouts();
            //loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async Task ShowForm(int? id)
    {
        var title = id == null ? "Add Routine" : "Edit Routine";
        await DialogService.OpenAsync<WorkoutsForm>(title,
        new Dictionary<string, object>() { { "Id", id } },
        new Radzen.DialogOptions()
            {
                Width = "512px",
                Draggable = true,
                CloseDialogOnOverlayClick = true
            }
        );
    }

    private async Task DeleteWorkout(int id)
    {
        await WorkoutService.DeleteWorkout(id);
    }

    private void StartWorkout(Workout w)
    {
        TrackedWorkoutService.StartWorkout(w);
    }
}
